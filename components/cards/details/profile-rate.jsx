import { Rates } from "@/components/Utils";
import Image from "next/image";
import React, { useState } from "react";
import { useIntl } from "react-intl";
import { MyOrderButtons } from ".";
import {
  ORDER_DETAILS_AGREEMENT_VIEW,
  ORDER_DETAILS_EXPERTS,
} from "@/utils/data";

export default function ProfileRate({
  rate,
  full_name,
  path,
  type = "default",
  user_type,
  specialities,
  chat_id,
  id,
  is_online,
}) {
  const [imgSrc, setImgSrc] = useState(path ?? "/images/default.png");
  const intl = useIntl();

  if (type == "orders/agreement/view") {
    const level_of_expert = [
      {
        id: 1,
        name: intl.formatMessage({ id: "Havaskor" }),
        value: "AMATEUR",
        icon: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clip-path="url(#clip0_67_4062)">
        <path d="M12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0ZM7.81054 6.24024H10.8999L11.9004 7.5293H19.166V17.7598H4.83398V7.5293H6.81006L7.81054 6.24024Z" fill="#FF9533"/>
        </g>
        <defs>
        <clipPath id="clip0_67_4062">
        <rect width="24" height="24" fill="white"/>
        </clipPath>
        </defs>
        </svg>
        `,
      },
      {
        id: 2,
        name: intl.formatMessage({ id: "Mutaxassis" }),
        value: "EXPERT",
        icon: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M3.783 2.826L12 1L20.217 2.826C20.4391 2.87536 20.6377 2.99897 20.78 3.1764C20.9224 3.35384 21 3.57452 21 3.802V13.789C20.9999 14.7767 20.756 15.7492 20.2899 16.62C19.8238 17.4908 19.1499 18.2331 18.328 18.781L12 23L5.672 18.781C4.85027 18.2332 4.17646 17.4911 3.71035 16.6205C3.24424 15.7498 3.00024 14.7776 3 13.79V3.802C3.00004 3.57452 3.07764 3.35384 3.21999 3.1764C3.36234 2.99897 3.56094 2.87536 3.783 2.826ZM13 10V5L8 12H11V17L16 10H13Z" fill="#00A8DD"/>
        </svg>
        `,
      },
      {
        id: 3,
        name: intl.formatMessage({ id: "Profi" }),
        value: "PROFI",
        icon: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g clip-path="url(#clip0_37_4298)">
      <path d="M11.9784 19.0583C17.2411 19.0583 21.5075 14.7919 21.5075 9.52913C21.5075 4.26634 17.2411 0 11.9784 0C6.71556 0 2.44922 4.26634 2.44922 9.52913C2.44922 14.7919 6.71556 19.0583 11.9784 19.0583Z" fill="#FFEF5C"/>
      <path d="M4.25921 15.1035L0.980469 20.787L4.80724 20.5838L6.54582 23.9996L9.57889 18.7413C7.40567 18.1791 5.53952 16.8704 4.25921 15.1035Z" fill="#EFCD1B"/>
      <path d="M19.7157 15.0752C18.4448 16.8468 16.5787 18.1602 14.4102 18.7319L17.4527 23.9996L19.1913 20.5839L23.018 20.787L19.7157 15.0752Z" fill="#EFCD1B"/>
      <path d="M11.9813 16.4362C15.796 16.4362 18.8884 13.3438 18.8884 9.52916C18.8884 5.71448 15.796 2.62207 11.9813 2.62207C8.16663 2.62207 5.07422 5.71448 5.07422 9.52916C5.07422 13.3438 8.16663 16.4362 11.9813 16.4362Z" fill="#EFCD1B"/>
      <path d="M15.9105 8.93643C16.0861 8.7792 15.9885 8.50405 15.7466 8.47189L13.4947 8.17173C13.3972 8.15743 13.3152 8.10383 13.2723 8.02165L12.2654 6.15276C12.1561 5.94908 11.84 5.94908 11.7307 6.15276L10.7277 8.02165C10.6848 8.10026 10.5989 8.15743 10.5053 8.17173L8.25344 8.47189C8.01147 8.50405 7.91391 8.7792 8.08953 8.93643L9.71694 10.3908C9.78719 10.4551 9.81841 10.5445 9.8028 10.6302L9.42034 12.6813C9.37741 12.9029 9.63498 13.0744 9.85353 12.9672L11.8673 11.9988C11.9532 11.9559 12.0585 11.9559 12.1444 11.9988L14.1582 12.9672C14.3767 13.0708 14.6304 12.9029 14.5914 12.6813L14.205 10.6302C14.1894 10.5409 14.2206 10.4516 14.2909 10.3908L15.9105 8.93643Z" fill="white"/>
      </g>
      <defs>
      <clipPath id="clip0_37_4298">
      <rect width="24" height="24" fill="white"/>
      </clipPath>
      </defs>
      </svg>
      `,
      },
    ];

    const current_level = level_of_expert?.find(
      (item) => item?.name == user_type
    );

    return (
      <div className="flex items-center justify-between w-full">
        <div className="flex items-center gap-4">
          <div className="w-16 small:w-[90px] h-16 small:h-[90px] overflow-hidden full__image rounded-full">
            <Image
              src={imgSrc}
              title={full_name}
              alt=""
              width={0}
              height={0}
              className="w-full h-full object-cover"
              layout="responsive"
              onError={() => setImgSrc("/images/defaultAvatar.png")}
            />
          </div>
          <div className="flex flex-col gap-2">
            <div className="flex items-center gap-1">
              <span dangerouslySetInnerHTML={{ __html: current_level?.icon }} />
              <span className="text-[15px] text-primary">
                {current_level?.name}
              </span>
            </div>
            <h3 className="font-medium text-lg sm:text-xl leading-5 sm:leading-6 pt-1">
              {full_name}
            </h3>

            <div className="flex flex-row flex-wrap gap-y-0 gap-x-1">
              {specialities?.map((item) => {
                return (
                  <p className="text-sm text-primary" key={item?.name}>
                    {item?.name},
                  </p>
                );
              })}
            </div>
          </div>
        </div>
        <div className="sm:flex hidden flex-col items-end gap-3">
          <p className="flex items-center gap-1">
            <svg
              width="20"
              height="20"
              viewBox="0 0 20 20"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18.3504 9.30144C18.2396 9.07966 18.0766 8.88808 17.8754 8.74311L16.7671 7.90977C16.7094 7.87002 16.668 7.81086 16.6504 7.74311C16.6255 7.67589 16.6255 7.60199 16.6504 7.53477L17.1087 6.17644C17.1823 5.93351 17.1994 5.67698 17.1587 5.42644C17.1206 5.17118 17.0173 4.93008 16.8587 4.72644C16.7063 4.52261 16.5059 4.35947 16.2754 4.25144C16.0549 4.14556 15.8113 4.09684 15.5671 4.10977H14.3171C14.2432 4.10887 14.1715 4.08402 14.1129 4.03894C14.0543 3.99387 14.0119 3.931 13.9921 3.85977L13.6337 2.60977C13.564 2.35645 13.4322 2.12448 13.2504 1.93477C13.0685 1.74994 12.8459 1.61012 12.6004 1.52644C12.3522 1.45029 12.0897 1.43317 11.8337 1.47644C11.5801 1.52667 11.3426 1.63825 11.1421 1.80144L10.1921 2.55144C10.1394 2.5989 10.0713 2.62556 10.0004 2.62644C9.93642 2.63255 9.87215 2.61795 9.81708 2.58477L8.87541 1.83477C8.68211 1.6768 8.45333 1.56813 8.20875 1.5181C7.96767 1.46072 7.71649 1.46072 7.47542 1.5181C7.23342 1.58436 7.01063 1.70718 6.82542 1.87644C6.63581 2.06094 6.4905 2.28602 6.40042 2.53477L6.04208 3.79311C6.02389 3.86729 5.9795 3.9324 5.91708 3.97644C5.85151 4.02225 5.77165 4.04295 5.69208 4.03477H4.50875C4.25304 4.02409 3.99855 4.07556 3.76708 4.18477C3.53241 4.28978 3.32867 4.45335 3.17542 4.65977C3.02118 4.86281 2.91827 5.10009 2.87542 5.35144C2.83375 5.59561 2.85042 5.84727 2.92542 6.08477L3.33375 7.49227C3.35523 7.55919 3.35556 7.6311 3.33468 7.69821C3.3138 7.76532 3.27274 7.82435 3.21708 7.86727L2.10875 8.70061C1.90708 8.85061 1.74208 9.04394 1.62542 9.26727C1.51594 9.48883 1.45898 9.73264 1.45898 9.97977C1.45898 10.2269 1.51594 10.4707 1.62542 10.6923C1.74172 10.9152 1.90696 11.1089 2.10875 11.2589L3.21708 12.0923C3.27274 12.1352 3.3138 12.1942 3.33468 12.2613C3.35556 12.3284 3.35523 12.4004 3.33375 12.4673L2.87542 13.8256C2.79778 14.0705 2.77782 14.33 2.81708 14.5839C2.85875 14.8323 2.96208 15.0673 3.11708 15.2673C3.26958 15.4756 3.47375 15.6423 3.70875 15.7506C3.92958 15.8556 4.17292 15.9039 4.41708 15.8923H5.65875C5.73391 15.889 5.80776 15.9127 5.86708 15.9589C5.92698 16.0001 5.96875 16.0628 5.98375 16.1339L6.34208 17.3923C6.41614 17.6413 6.54742 17.8696 6.72542 18.0589C6.99718 18.342 7.36481 18.5134 7.75632 18.5396C8.14783 18.5658 8.53502 18.4449 8.84208 18.2006L9.80042 17.4423C9.85822 17.3956 9.93028 17.3701 10.0046 17.3701C10.0789 17.3701 10.1509 17.3956 10.2087 17.4423L11.1504 18.1923C11.3504 18.3606 11.5921 18.4731 11.8504 18.5173C11.9449 18.5256 12.0393 18.5256 12.1337 18.5173C12.2978 18.5175 12.4608 18.4922 12.6171 18.4423C12.8645 18.3645 13.0885 18.2262 13.269 18.04C13.4494 17.8537 13.5805 17.6253 13.6504 17.3756L14.0171 16.1089C14.0321 16.0378 14.0738 15.9751 14.1337 15.9339C14.1982 15.8852 14.2781 15.8615 14.3587 15.8673H15.5504C15.8052 15.8774 16.059 15.8289 16.2921 15.7256C16.5219 15.616 16.7221 15.4528 16.8758 15.2498C17.0295 15.0468 17.1322 14.8099 17.1754 14.5589C17.2193 14.3025 17.1992 14.0392 17.1171 13.7923L16.6671 12.4423C16.6422 12.3751 16.6422 12.3012 16.6671 12.2339C16.6847 12.1662 16.7261 12.107 16.7837 12.0673L17.8921 11.2339C18.0929 11.0852 18.2557 10.891 18.3671 10.6673C18.4842 10.4467 18.5443 10.2003 18.5421 9.95061C18.5259 9.72265 18.4605 9.50173 18.3504 9.30144ZM13.8171 8.66727L10.1337 12.3506C9.99114 12.4903 9.82461 12.6032 9.64208 12.6839C9.45708 12.7589 9.25875 12.7989 9.05875 12.8006C8.85483 12.802 8.65301 12.7594 8.46708 12.6756C8.28066 12.5974 8.11094 12.4843 7.96708 12.3423L6.15042 10.5173C6.01389 10.3579 5.94256 10.1528 5.95066 9.94306C5.95876 9.73333 6.0457 9.53438 6.19411 9.38597C6.34253 9.23756 6.54147 9.15061 6.7512 9.14251C6.96093 9.13441 7.166 9.20575 7.32542 9.34227L9.05875 11.0756L12.6421 7.48394C12.7982 7.32873 13.0094 7.24161 13.2296 7.24161C13.4497 7.24161 13.6609 7.32873 13.8171 7.48394C13.9003 7.56189 13.9667 7.6561 14.0121 7.76074C14.0575 7.86538 14.0809 7.97822 14.0809 8.09227C14.0809 8.20633 14.0575 8.31917 14.0121 8.42381C13.9667 8.52845 13.9003 8.62266 13.8171 8.70061V8.66727Z"
                fill="#00A8DD"
              />
            </svg>
            <span>{intl.formatMessage({ id: "Tasdiqlangan" })}</span>
          </p>
          <MyOrderButtons
            card_type={ORDER_DETAILS_AGREEMENT_VIEW}
            chat_id={chat_id}
            id={id}
          />
        </div>
      </div>
    );
  }

  if (type == "orders/agreement/create") {
    const level_of_expert = [
      {
        id: 1,
        name: intl.formatMessage({ id: "Havaskor" }),
        value: "AMATEUR",
        icon: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clip-path="url(#clip0_67_4062)">
        <path d="M12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0ZM7.81054 6.24024H10.8999L11.9004 7.5293H19.166V17.7598H4.83398V7.5293H6.81006L7.81054 6.24024Z" fill="#FF9533"/>
        </g>
        <defs>
        <clipPath id="clip0_67_4062">
        <rect width="24" height="24" fill="white"/>
        </clipPath>
        </defs>
        </svg>
        `,
      },
      {
        id: 2,
        name: intl.formatMessage({ id: "Mutaxassis" }),
        value: "EXPERT",
        icon: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M3.783 2.826L12 1L20.217 2.826C20.4391 2.87536 20.6377 2.99897 20.78 3.1764C20.9224 3.35384 21 3.57452 21 3.802V13.789C20.9999 14.7767 20.756 15.7492 20.2899 16.62C19.8238 17.4908 19.1499 18.2331 18.328 18.781L12 23L5.672 18.781C4.85027 18.2332 4.17646 17.4911 3.71035 16.6205C3.24424 15.7498 3.00024 14.7776 3 13.79V3.802C3.00004 3.57452 3.07764 3.35384 3.21999 3.1764C3.36234 2.99897 3.56094 2.87536 3.783 2.826ZM13 10V5L8 12H11V17L16 10H13Z" fill="#00A8DD"/>
        </svg>
        `,
      },
      {
        id: 3,
        name: intl.formatMessage({ id: "Profi" }),
        value: "PROFI",
        icon: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g clip-path="url(#clip0_37_4298)">
      <path d="M11.9784 19.0583C17.2411 19.0583 21.5075 14.7919 21.5075 9.52913C21.5075 4.26634 17.2411 0 11.9784 0C6.71556 0 2.44922 4.26634 2.44922 9.52913C2.44922 14.7919 6.71556 19.0583 11.9784 19.0583Z" fill="#FFEF5C"/>
      <path d="M4.25921 15.1035L0.980469 20.787L4.80724 20.5838L6.54582 23.9996L9.57889 18.7413C7.40567 18.1791 5.53952 16.8704 4.25921 15.1035Z" fill="#EFCD1B"/>
      <path d="M19.7157 15.0752C18.4448 16.8468 16.5787 18.1602 14.4102 18.7319L17.4527 23.9996L19.1913 20.5839L23.018 20.787L19.7157 15.0752Z" fill="#EFCD1B"/>
      <path d="M11.9813 16.4362C15.796 16.4362 18.8884 13.3438 18.8884 9.52916C18.8884 5.71448 15.796 2.62207 11.9813 2.62207C8.16663 2.62207 5.07422 5.71448 5.07422 9.52916C5.07422 13.3438 8.16663 16.4362 11.9813 16.4362Z" fill="#EFCD1B"/>
      <path d="M15.9105 8.93643C16.0861 8.7792 15.9885 8.50405 15.7466 8.47189L13.4947 8.17173C13.3972 8.15743 13.3152 8.10383 13.2723 8.02165L12.2654 6.15276C12.1561 5.94908 11.84 5.94908 11.7307 6.15276L10.7277 8.02165C10.6848 8.10026 10.5989 8.15743 10.5053 8.17173L8.25344 8.47189C8.01147 8.50405 7.91391 8.7792 8.08953 8.93643L9.71694 10.3908C9.78719 10.4551 9.81841 10.5445 9.8028 10.6302L9.42034 12.6813C9.37741 12.9029 9.63498 13.0744 9.85353 12.9672L11.8673 11.9988C11.9532 11.9559 12.0585 11.9559 12.1444 11.9988L14.1582 12.9672C14.3767 13.0708 14.6304 12.9029 14.5914 12.6813L14.205 10.6302C14.1894 10.5409 14.2206 10.4516 14.2909 10.3908L15.9105 8.93643Z" fill="white"/>
      </g>
      <defs>
      <clipPath id="clip0_37_4298">
      <rect width="24" height="24" fill="white"/>
      </clipPath>
      </defs>
      </svg>
      `,
      },
    ];

    const current_level = level_of_expert?.find(
      (item) => item?.name == user_type
    );

    return (
      <div className="flex items-center justify-between w-full sm:p-8">
        <div className="flex items-center gap-4">
          <div className="w-16 small:w-[90px] h-16 small:h-[90px] overflow-hidden full__image rounded-full">
            <Image
              src={imgSrc}
              title={full_name}
              alt=""
              width={0}
              height={0}
              className="w-full h-full object-cover"
              layout="responsive"
              onError={() => setImgSrc("/images/defaultAvatar.png")}
            />
          </div>
          <div className="flex flex-col gap-2">
            <div className="flex items-center gap-1">
              <span dangerouslySetInnerHTML={{ __html: current_level?.icon }} />
              <span className="text-[15px] text-primary">
                {current_level?.name}
              </span>
            </div>
            <h3 className="font-medium text-lg sm:text-xl leading-5 sm:leading-6 pt-1">
              {full_name}
            </h3>
            <p className="text-sm text-main font-normal">
              <span>{intl.formatMessage({ id: "Holati" })}:</span>{" "}
              <span>
                {intl.formatMessage({
                  id: is_online ? "online" : "online emas",
                })}
              </span>
            </p>
            <div className="flex flex-row flex-wrap gap-y-0 gap-x-1">
              {specialities?.map((item) => {
                return (
                  <p className="text-sm text-primary" key={item?.name}>
                    {item?.name},
                  </p>
                );
              })}
            </div>
          </div>
        </div>
        <div className="sm:flex hidden flex-col items-end gap-1">
          <p className="flex items-center gap-1">
            <svg
              width="20"
              height="20"
              viewBox="0 0 20 20"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18.3504 9.30144C18.2396 9.07966 18.0766 8.88808 17.8754 8.74311L16.7671 7.90977C16.7094 7.87002 16.668 7.81086 16.6504 7.74311C16.6255 7.67589 16.6255 7.60199 16.6504 7.53477L17.1087 6.17644C17.1823 5.93351 17.1994 5.67698 17.1587 5.42644C17.1206 5.17118 17.0173 4.93008 16.8587 4.72644C16.7063 4.52261 16.5059 4.35947 16.2754 4.25144C16.0549 4.14556 15.8113 4.09684 15.5671 4.10977H14.3171C14.2432 4.10887 14.1715 4.08402 14.1129 4.03894C14.0543 3.99387 14.0119 3.931 13.9921 3.85977L13.6337 2.60977C13.564 2.35645 13.4322 2.12448 13.2504 1.93477C13.0685 1.74994 12.8459 1.61012 12.6004 1.52644C12.3522 1.45029 12.0897 1.43317 11.8337 1.47644C11.5801 1.52667 11.3426 1.63825 11.1421 1.80144L10.1921 2.55144C10.1394 2.5989 10.0713 2.62556 10.0004 2.62644C9.93642 2.63255 9.87215 2.61795 9.81708 2.58477L8.87541 1.83477C8.68211 1.6768 8.45333 1.56813 8.20875 1.5181C7.96767 1.46072 7.71649 1.46072 7.47542 1.5181C7.23342 1.58436 7.01063 1.70718 6.82542 1.87644C6.63581 2.06094 6.4905 2.28602 6.40042 2.53477L6.04208 3.79311C6.02389 3.86729 5.9795 3.9324 5.91708 3.97644C5.85151 4.02225 5.77165 4.04295 5.69208 4.03477H4.50875C4.25304 4.02409 3.99855 4.07556 3.76708 4.18477C3.53241 4.28978 3.32867 4.45335 3.17542 4.65977C3.02118 4.86281 2.91827 5.10009 2.87542 5.35144C2.83375 5.59561 2.85042 5.84727 2.92542 6.08477L3.33375 7.49227C3.35523 7.55919 3.35556 7.6311 3.33468 7.69821C3.3138 7.76532 3.27274 7.82435 3.21708 7.86727L2.10875 8.70061C1.90708 8.85061 1.74208 9.04394 1.62542 9.26727C1.51594 9.48883 1.45898 9.73264 1.45898 9.97977C1.45898 10.2269 1.51594 10.4707 1.62542 10.6923C1.74172 10.9152 1.90696 11.1089 2.10875 11.2589L3.21708 12.0923C3.27274 12.1352 3.3138 12.1942 3.33468 12.2613C3.35556 12.3284 3.35523 12.4004 3.33375 12.4673L2.87542 13.8256C2.79778 14.0705 2.77782 14.33 2.81708 14.5839C2.85875 14.8323 2.96208 15.0673 3.11708 15.2673C3.26958 15.4756 3.47375 15.6423 3.70875 15.7506C3.92958 15.8556 4.17292 15.9039 4.41708 15.8923H5.65875C5.73391 15.889 5.80776 15.9127 5.86708 15.9589C5.92698 16.0001 5.96875 16.0628 5.98375 16.1339L6.34208 17.3923C6.41614 17.6413 6.54742 17.8696 6.72542 18.0589C6.99718 18.342 7.36481 18.5134 7.75632 18.5396C8.14783 18.5658 8.53502 18.4449 8.84208 18.2006L9.80042 17.4423C9.85822 17.3956 9.93028 17.3701 10.0046 17.3701C10.0789 17.3701 10.1509 17.3956 10.2087 17.4423L11.1504 18.1923C11.3504 18.3606 11.5921 18.4731 11.8504 18.5173C11.9449 18.5256 12.0393 18.5256 12.1337 18.5173C12.2978 18.5175 12.4608 18.4922 12.6171 18.4423C12.8645 18.3645 13.0885 18.2262 13.269 18.04C13.4494 17.8537 13.5805 17.6253 13.6504 17.3756L14.0171 16.1089C14.0321 16.0378 14.0738 15.9751 14.1337 15.9339C14.1982 15.8852 14.2781 15.8615 14.3587 15.8673H15.5504C15.8052 15.8774 16.059 15.8289 16.2921 15.7256C16.5219 15.616 16.7221 15.4528 16.8758 15.2498C17.0295 15.0468 17.1322 14.8099 17.1754 14.5589C17.2193 14.3025 17.1992 14.0392 17.1171 13.7923L16.6671 12.4423C16.6422 12.3751 16.6422 12.3012 16.6671 12.2339C16.6847 12.1662 16.7261 12.107 16.7837 12.0673L17.8921 11.2339C18.0929 11.0852 18.2557 10.891 18.3671 10.6673C18.4842 10.4467 18.5443 10.2003 18.5421 9.95061C18.5259 9.72265 18.4605 9.50173 18.3504 9.30144ZM13.8171 8.66727L10.1337 12.3506C9.99114 12.4903 9.82461 12.6032 9.64208 12.6839C9.45708 12.7589 9.25875 12.7989 9.05875 12.8006C8.85483 12.802 8.65301 12.7594 8.46708 12.6756C8.28066 12.5974 8.11094 12.4843 7.96708 12.3423L6.15042 10.5173C6.01389 10.3579 5.94256 10.1528 5.95066 9.94306C5.95876 9.73333 6.0457 9.53438 6.19411 9.38597C6.34253 9.23756 6.54147 9.15061 6.7512 9.14251C6.96093 9.13441 7.166 9.20575 7.32542 9.34227L9.05875 11.0756L12.6421 7.48394C12.7982 7.32873 13.0094 7.24161 13.2296 7.24161C13.4497 7.24161 13.6609 7.32873 13.8171 7.48394C13.9003 7.56189 13.9667 7.6561 14.0121 7.76074C14.0575 7.86538 14.0809 7.97822 14.0809 8.09227C14.0809 8.20633 14.0575 8.31917 14.0121 8.42381C13.9667 8.52845 13.9003 8.62266 13.8171 8.70061V8.66727Z"
                fill="#00A8DD"
              />
            </svg>
            <span>{intl.formatMessage({ id: "Tasdiqlangan" })}</span>
          </p>
          <div className="flex flex-col gap-1 items-center">
            <p className="text-sm">{rate || 0}</p>
            <Rates current_rate={rate} />
          </div>
        </div>
      </div>
    );
  }

  // this is default type
  return (
    <>
      <div className="w-16 small:w-[90px] h-16 small:h-[90px] overflow-hidden full__image rounded-full">
        <Image
          src={imgSrc}
          title={full_name}
          alt=""
          width={0}
          height={0}
          className="w-full h-full object-cover"
          layout="responsive"
          onError={() => setImgSrc("/images/defaultAvatar.png")}
        />
      </div>
      <p className="text-sm">{rate || 0}</p>
      <Rates current_rate={rate} />
    </>
  );
}
